import pygame
import random

pygame.init()

display_width = 800
display_height = 600

display = pygame.display.set_mode((display_width, display_height))
pygame.display.set_caption('the best roguelike ever')

icon = pygame.image.load('castle.png')
pygame.display.set_icon(icon)

person_img = [pygame.image.load('person00.png'), pygame.image.load('person11.png')]

health_img = pygame.image.load('heart.png')
health_img = pygame.transform.scale(health_img, (35, 35))
# button_sound = pygame.mixer.Sound('button.mp3')

img_counter = 0
health = 3


class Object:
    def __init__(self, x, y, width, height, image, speed):
        self.x = x
        self.y = y
        self.width = width
        self.image = image
        self.height = height
        self.speed = speed

    def move(self):
        if self.x >= -self.width:
            pygame.draw.rect(display, (224, 121, 31), (self.x, self.y, self.width, self.height))
            self.x -= self.speed
            return True
        else:
            return False

    def return_self(self, radius):
        self.x = radius


usr_width = 60
usr_height = 100
usr_x = display_width // 3
usr_y = display_height - usr_height - 100

wall_width = 20
wall_height = 60
wall_x = display_width - 50
wall_y = display_height - wall_height - 40

clock = pygame.time.Clock()

make_jump = False
jump_counter = 30


def show_menu():
    menu_bckgr = pygame.image.load('menu.jpeg')

    start_btn = Button(265, 80)
    quit_btn = Button(245, 80)

    show = True

    while show:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        display.blit(menu_bckgr, (0, 0))
        start_btn.draw(270, 200, 'start game', start_game, 50)
        quit_btn.draw(280, 300, 'quit game', quit, 50)

        pygame.display.update()
        clock.tick(30)


def start_game():
    global make_jump, jump_counter, usr_y, health

    while game_cycle():
        make_jump = False
        jump_counter = 30
        usr_y = display_height - usr_height - 100
        health = 3


def game_cycle():
    global make_jump
    game = True
    wall_arr = []
    create_wall_arr(wall_arr)

#    heart = Object(display_width, 280, 35, 35, health_img, 4)

    while game:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        '''heart.move()
        hearts_plus(heart)'''

        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            make_jump = True
        if keys[pygame.K_ESCAPE]:
            pause()

        if make_jump:
            jump()

        display.fill((255, 255, 255))

        draw_array(wall_arr)
        draw_person()

        if check_collision(wall_arr):
            game = False

        show_health()

        pygame.display.update()
        clock.tick(80)

    return game_over()


class Button:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.inactive_clr = (13, 162, 58)
        self.active_clr = (23, 204, 58)

    def draw(self, x, y, message, action=None, font_size=30):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()

        if x < mouse[0] < x + self.width and y < mouse[1] < y + self.height:
            pygame.draw.rect(display, self.active_clr, (x, y, self.width, self.height))

            if click[0] == 1:
              # pygame.mixer.Sound.play(button_sound)
                pygame.time.delay(300)
                if action is not None:
                    if action == quit:
                        pygame.quit()
                        quit()
                    else:
                        action()
        else:
            pygame.draw.rect(display, self.inactive_clr, (x, y, self.width, self.height))

        print_text(message=message, x=x+10, y=y+10, font_size=font_size)


def jump():
    global usr_y, jump_counter, make_jump
    if jump_counter >= -30:
        usr_y -= jump_counter / 2.5
        jump_counter -= 1
    else:
        jump_counter = 30
        make_jump = False


def create_wall_arr(array):
    array.append(Object(display_width + 20, display_height - 170, 20, 70, None, 4))
    array.append(Object(display_width + 300, display_height - 150, 30, 50, None, 4))
    array.append(Object(display_width + 600, display_height - 180, 25, 80, None, 4))


def find_radius(array):
    maximum = max(array[0].x, array[1].x, array[2].x)

    if maximum < display_width:
        radius = display_width
        if radius - maximum < 50:
            radius += 150
    else:
        radius = maximum

    choice = random.randrange(0, 5)
    if choice == 0:
        radius += random.randrange(10, 15)
    else:
        radius += random.randrange(200, 350)

    return radius


def draw_array(array):
    for wall in array:
        check = wall.move()
        if not check:
            object_return(array, wall)


def draw_person():
    global img_counter
    if img_counter == 2:
        img_counter = 0

    display.blit(person_img[img_counter], (usr_x, usr_y))
    img_counter += 1


def print_text(message, x, y, font_color=(0, 0, 0), font_type='Empirecrown.ttf', font_size=30):
    font_type = pygame.font.Font(font_type, font_size)
    text = font_type.render(message, True, font_color)
    display.blit(text, (x, y))


def pause():
    paused = True
    while paused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        print_text('paused. press ENTER to continue', 160, 300)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RETURN]:
            paused = False

        pygame.display.update()


def check_collision(barriers):
    for barrier in barriers:
        if usr_y + usr_height >= barrier.y:
            if barrier.x <= usr_x <= barrier.x + barrier.width:
                if check_health():
                    object_return(barriers, barrier)
                    return False
                else:
                    return True
            elif barrier.x <= usr_x + usr_width <= barrier.x + barrier.width:
                if check_health():
                    object_return(barriers, barrier)
                    return False
                else:
                    return True
    return False


def object_return(objects, obj):
    radius = find_radius(objects)
    obj.return_self(radius)


def game_over():
    stopped = True
    while stopped:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        print_text('game over. press ENTER to play again or ESC to exit', 40, 300)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RETURN]:
            return True
        if keys[pygame.K_ESCAPE]:
            return False

        pygame.display.update()
        clock.tick(15)


def show_health():
    global health
    show = 0
    x = 15
    while show != health:
        display.blit(health_img, (x, 15))
        x += 45
        show += 1


def check_health():
    global health
    health -= 1
    if health == 0:
        return False
    else:
        return True


'''def hearts_plus(heart):
    global health, usr_x, usr_y, usr_width, usr_height

    if usr_x <= heart.x <= usr_x + usr_width:
        if usr_y <= heart.y <= usr_y + usr_height:
            if health < 5:
                health += 1

            radius = display_width + random.randrange(500, 1700)
            heart.return_self(radius, heart.y, heart.width, heart.image)'''


show_menu()

pygame.quit()
quit()
